@page "/profile"
@rendermode RenderMode.InteractiveServer
@inject IDbContextFactory<AppDbContext> DbFactory
@attribute [Authorize(Roles = "client")]
@inject IHttpContextAccessor HttpContextAccessor
@inject IActionLogger ActionLogger

<PageTitle>Фотоцентр | Профиль</PageTitle>

<head runat="server">
    <link href="Assets\Css\Profile.css" rel="stylesheet" type="text/css" />
</head>

<div class="content">

    <div class="profile-container">
        <h2 class="profile-header">Профиль пользователя</h2>

        <form id="profileForm">
            <label for="clientId">Номер клиента:</label>
            <input type="text" id="clientId" class="not-editable-input" value=@userId readonly>

            <label for="clientName">Имя:</label>
            <input type="text" id="clientName" class="not-editable-input" value=@clientName readonly>

            <label for="email">Почта:</label>
            <input type="email" id="email" class="not-editable-input" value=@email readonly>

            <label for="phone">Телефон:</label>
            <input type="tel" id="phone" class="editable-input" @bind="phone">

            <label for="address">Адрес:</label>
            <input type="text" id="address" class="editable-input" @bind="address">

            <label for="regDate">Дата регистрации:</label>
            <input type="text" id="regDate" class="not-editable-input" value=@regDate readonly>

            <div class="profile-actions">
                <button type="button" @onclick="DiscardChanges" class="action-button">Сбросить</button>
                <button type="button" @onclick="SaveChanges" class="action-button">Сохранить изменения</button>
            </div>
        </form>
    </div>

</div>

@code {
    private AppDbContext context = default!;

    private string? userId;
    User? user;
    Client? client;

    private string? clientName;
    private string? email;
    private string? phone;
    private string? address;
    private string? regDate;

    protected override void OnInitialized()
    {
        userId = HttpContextAccessor.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier);
        context = DbFactory.CreateDbContext();

        user = context.Users.FirstOrDefault(u => u.User_Id.ToString() == userId);
        client = context.Clients.FirstOrDefault(c => c.User_Id.ToString() == userId);

        clientName = user?.Username;
        email = client?.Email;
        phone = client?.Phone;
        address = client?.Address;
        regDate = user?.Date_Registered.ToString();
    }

    private void DiscardChanges()
    {
        phone = client?.Phone;
        address = client?.Address;
    }
    private void SaveChanges()
    {
        if (client != null)
        {

            ActionLogger.LogActionAsync(client.User_Id,
                "Изменение данных",
                $"Клиент: {client.User_Id}, Старая запись (адрес, телефон): {client.Address} {client.Phone}, Новая запись: {address} {phone}",
                "Clients",
                "info");

            client.Address = address;
            client.Phone = phone;
            context.Clients.Update(client);
            context.SaveChanges();
        }
        else
        {
            if (user != null)
                ActionLogger.LogActionAsync(user.User_Id,
                    "Изменение данных",
                    $"Клиент не найден",
                    "Clients",
                    "error");
        }
    }
}

@page "/registration"
@inject AppDbContext AppDbContext
@layout EmptyLayout
@inject NavigationManager NavManager
@inject IActionLogger ActionLogger
@rendermode RenderMode.InteractiveServer

<PageTitle>Фотоцентр | Регистрация</PageTitle>

<head runat="server">
    <link href="Assets\Css\Registration.css" rel="stylesheet" type="text/css" />
</head>

<form class="registration-form" @onsubmit="Register" method="post">
    <div class="wrapper">
        <h2>Регистрация</h2>

        <label for="name">Имя Пользователя</label>
        <input type="text" id="name" @bind="Username" @oninput="CheckUsername" placeholder="Введите ваше имя" required />
        @if (!string.IsNullOrEmpty(UsernameError))
        {
            <div style="color: red; margin-top: -10px; margin-bottom: 5px;">@UsernameError</div>
        }
        @if (string.IsNullOrEmpty(UsernameError))
        {
            <div style="color: green;  margin-top: -10px; margin-bottom: 5px;">Имя пользователя свободно</div>
        }

        <label for="email">Почта</label>
        <input type="email" id="email" @bind="email" @oninput="CheckEmail" placeholder="Введите вашу почту" required  />
        @if (!string.IsNullOrEmpty(emailError))
        {
            <div style="color: red; margin-top: -10px; margin-bottom: 5px;">@emailError</div>
        }
        @if (string.IsNullOrEmpty(emailError))
        {
            <div style="color: green;  margin-top: -10px; margin-bottom: 5px;">Почта не занята</div>
        }

        <label for="password">Пароль</label>
        <input type="password" id="password" value="@password" @oninput="UpdatePassword" placeholder="Введите пароль" 
            minlength="8" required
            pattern="(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}"
               title="Пароль должен содержать минимум 8 символов, включая буквы и цифры">

        <label for="phone">Телефон</label>
        <input type="tel" id="phone" @bind="phone" placeholder="Введите номер телефона (не обязательно)">

        <label for="address">Адрес</label>
        <input type="text" id="address" @bind="address" placeholder="Введите адрес (не обязательно)">

        <button type="submit">Зарегистрироваться</button>
    </div>
</form>

@code{
    public string? Username;
    public string? password;
    public string? email;

    public string? phone;
    public string? address;

    private string? emailError;
    private string? UsernameError;



    private async Task Register()
    {
        var date = DateTime.Now;
        if (Username != null && password != null && email != null) 
        {
            var user = new User
                {
                    Username = Username,
                    Role = "client",
                    Password_Hash = PasswordHelper.HashPassword(password),
                    Date_Registered = date,
                };

            await AppDbContext.Users.AddAsync(user);
            await AppDbContext.SaveChangesAsync();


            var client = new Client
                {
                    User_Id = user.User_Id,
                    Email = email,
                    Phone = phone,
                    Address = address,
                };

            try
            {
                await AppDbContext.Clients.AddAsync(client);
                await AppDbContext.SaveChangesAsync();

                await ActionLogger.LogActionAsync(user.User_Id,
                "Регистрация",
                $"Имя: {Username}, Почта: {email}, Телефон: {phone}, Адрес: {address}",
                "Clients",
                "info");

                NavManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                await ActionLogger.LogActionAsync(user.User_Id,
                "Регистрация",
                $"Исключение: {ex.Message}",
                "Clients",
                "error");
            }
        }

    }
    private void UpdatePassword(ChangeEventArgs e)
    {
        password = e.Value?.ToString() ?? null;
    }

    private async Task CheckEmail(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? null;

        using (var context = new AppDbContext())
        {
            var existingEmail = await context.Clients.FirstOrDefaultAsync(u => u.Email == email);
            emailError = existingEmail != null ? "Почта уже используется" : null;
        }
    }

    private async Task CheckUsername(ChangeEventArgs e)
    {
        Username = e.Value?.ToString() ?? null;

        using (var context = new AppDbContext())
        {
            var existingUser = await context.Users.FirstOrDefaultAsync(u => u.Username == Username);
            UsernameError = existingUser != null ? "Имя пользователя занято" : null;
        }
    }
}
@page "/employee"

@rendermode RenderMode.InteractiveServer
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IActionLogger ActionLogger
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize(Roles = "admin, manager")]


<PageTitle>Фотоцентр | Сотрудники</PageTitle>

<head runat="server">
    <link href="Assets\Css\Employee.css" rel="stylesheet" type="text/css" />
</head>

<div class="employees-container">
    <!-- Поле для поиска или фильтрации -->
    <div class="search-container">
        <input type="text" placeholder="ID" @bind="userIdFilter" @bind:event="oninput" />
        <input type="text" placeholder="Имя" @bind="UsernameFilter" @bind:event="oninput" />
    </div>

    <!-- Таблица сотрудников -->
    <QuickGrid Items="FilteredPhotographers">
        <PropertyColumn Property="@(p => p.User_Id)" />
        <PropertyColumn Property="@(p => p.Username)" />
        <PropertyColumn Property="@(p => p.Rating)" />
        <PropertyColumn Property="@(p => p.Orders_In_Progress)" />
        <PropertyColumn Property="@(p => p.Orders_Complete)" />
    </QuickGrid>
</div>

@code {
    private AppDbContext context = default!;

    private string userIdFilter = "";
    private string UsernameFilter = "";

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    private IQueryable<Photographer> FilteredPhotographers=>
        context.Photographers.Where(a => (a.User_Id.ToString().Contains(userIdFilter) && !userIdFilter.Contains(" "))
        || (userIdFilter.Contains(" ") && a.User_Id.ToString().Equals(userIdFilter))).
        Where(a => a.Username.Contains(UsernameFilter));



    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }
}